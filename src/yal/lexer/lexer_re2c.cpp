/* Generated by re2c 1.0.2 on Sun Oct  1 11:25:57 2017 */
#include "yal/yal.h"
#include "yal/io/bytestream.h"
#include "yal/lexer/tokens.h"
#include "yal/lexer/lexer.h"
#include <iostream>
#define YYMAXFILL 6


namespace yal {

    enum {
        kMaxBufferSize = 4096
    };

    struct Lexer::LexerState {
        uint8_t buffer[kMaxBufferSize + YYMAXFILL];
        uint8_t* limit = nullptr;
        uint8_t* current = nullptr;
        uint8_t* marker = nullptr;
        uint8_t* token = nullptr;
        size_t lineNum = 1;
        size_t streamReadOffset = std::numeric_limits<size_t>::max();
        size_t lineStartOffset = 0;
        size_t tokenLineStart =0;
        size_t tokenColumnStart = 0;
        bool eof = false;

        bool fill(const size_t size,
                  ByteStream& stream) {

            if (eof) {
                return false;
            }
            const size_t free = token - buffer;
            if (free < size) {
                return false;
            }
            streamReadOffset = static_cast<uintptr_t>(limit - token) + stream.getPosition();
            ::memmove(buffer, token, limit - token);
            limit -= free;
            current -= free;
            marker -= free;
            token -= free;
            limit += stream.read(limit, free);
            if (limit < buffer + kMaxBufferSize) {
                eof = true;
                memset(limit, 0, YYMAXFILL);
                limit += YYMAXFILL;
            }
            return true;
        }


        size_t getColumnOffsetStart() const {

            if ( streamReadOffset== std::numeric_limits<size_t>::max()) {
                return 0;
            }

           return streamReadOffset +
                static_cast<size_t>(reinterpret_cast<uintptr_t>(token)
                                    - reinterpret_cast<uintptr_t>(buffer))
                            - lineStartOffset;
        }

        size_t getColumnOffsetEnd() const {
           return streamReadOffset +
                static_cast<size_t>(reinterpret_cast<uintptr_t>(current)
                                    - reinterpret_cast<uintptr_t>(buffer))
                            - lineStartOffset;
        }

        size_t getStreamOffset() const {
            return streamReadOffset +
                 static_cast<size_t>(reinterpret_cast<uintptr_t>(token)
                                     - reinterpret_cast<uintptr_t>(buffer));
        }

        void updateLineStartOffset() {
            lineNum++;
            lineStartOffset = streamReadOffset +
                    static_cast<size_t>(reinterpret_cast<uintptr_t>(current)
                                        - reinterpret_cast<uintptr_t>(buffer));
        }

        void markScanBegin() {
            token = current;
            tokenLineStart = lineNum;
            tokenColumnStart = getColumnOffsetStart();
        }

        size_t getTokenLength() const {
            return  static_cast<size_t>(reinterpret_cast<uintptr_t>(current)
                                        - reinterpret_cast<uintptr_t>(token));
        }

    };

    Lexer::Lexer(ByteStream &stream):
        m_stream(stream),
        m_lexerState(createLexerState()),
        m_curToken()
    {
        m_lexerState->limit = m_lexerState->buffer + kMaxBufferSize;
        m_lexerState->current = m_lexerState->limit;
        m_lexerState->token =m_lexerState->limit;
        m_lexerState->marker = m_lexerState->limit;
        m_curToken.token = Token::TokenCount;
    }

    Lexer::~Lexer(){

    }

    void
    Lexer::setToken(const Token token,
                    const LexerState& state) {
        m_curToken.token = token;
        m_curToken.tokLen = state.getTokenLength();
        m_curToken.lineStart = state.tokenLineStart;
        m_curToken.lineEnd = state.lineNum;
        m_curToken.columnStart = state.tokenColumnStart;
        m_curToken.columnEnd =state.getColumnOffsetEnd();
        m_curToken.tokenOffsetInStream = state.getStreamOffset();
    }

    std::unique_ptr<Lexer::LexerState>
    Lexer::createLexerState(){
        return std::make_unique<Lexer::LexerState>();
    }

    Lexer::Status
    Lexer::re2cExecute() {
        for (;;) {
            m_lexerState->markScanBegin();
            
{
	unsigned char yych;
	if ((m_lexerState->limit - m_lexerState->current) < 6) if (!m_lexerState->fill(6, m_stream)) return Status::EOS;
	yych = *m_lexerState->current;
	switch (yych) {
	case 0x00:	goto yy2;
	case '\t':
	case ' ':	goto yy6;
	case '\n':	goto yy9;
	case ':':	goto yy11;
	case ';':	goto yy13;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'm':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 'u':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	case '[':	goto yy18;
	case ']':	goto yy20;
	case 'a':	goto yy22;
	case 'f':	goto yy23;
	case 'l':	goto yy24;
	case 'n':	goto yy25;
	case 'o':	goto yy26;
	case 't':	goto yy27;
	case 'v':	goto yy28;
	case '{':	goto yy29;
	case '}':	goto yy31;
	default:	goto yy4;
	}
yy2:
	++m_lexerState->current;
	{ if (m_lexerState->limit - m_lexerState->token == YYMAXFILL) {return Status::EOS;} }
yy4:
	++m_lexerState->current;
	{ setToken(Token::TokenCount, *m_lexerState); return Status::Error;}
yy6:
	++m_lexerState->current;
	if (m_lexerState->limit <= m_lexerState->current) if (!m_lexerState->fill(1, m_stream)) return Status::EOS;
	yych = *m_lexerState->current;
	switch (yych) {
	case '\t':
	case ' ':	goto yy6;
	default:	goto yy8;
	}
yy8:
	{continue;}
yy9:
	++m_lexerState->current;
	{m_lexerState->updateLineStartOffset(); continue;}
yy11:
	++m_lexerState->current;
	{ setToken(Token::Colon, *m_lexerState); return Status::Ok;}
yy13:
	++m_lexerState->current;
	{ setToken(Token::SemiColon, *m_lexerState); return Status::Ok;}
yy15:
	++m_lexerState->current;
	if (m_lexerState->limit <= m_lexerState->current) if (!m_lexerState->fill(1, m_stream)) return Status::EOS;
	yych = *m_lexerState->current;
yy16:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy17;
	}
yy17:
	{ setToken(Token::Name, *m_lexerState); return Status::Ok;}
yy18:
	++m_lexerState->current;
	{ setToken(Token::BeginArray, *m_lexerState); return Status::Ok;}
yy20:
	++m_lexerState->current;
	{ setToken(Token::EndArray, *m_lexerState); return Status::Ok;}
yy22:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'n':	goto yy33;
	default:	goto yy16;
	}
yy23:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'a':	goto yy34;
	case 'n':	goto yy35;
	default:	goto yy16;
	}
yy24:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy37;
	default:	goto yy16;
	}
yy25:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'o':	goto yy38;
	default:	goto yy16;
	}
yy26:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'r':	goto yy39;
	default:	goto yy16;
	}
yy27:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'h':	goto yy41;
	case 'r':	goto yy42;
	case 'y':	goto yy43;
	default:	goto yy16;
	}
yy28:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'a':	goto yy44;
	default:	goto yy16;
	}
yy29:
	++m_lexerState->current;
	{ setToken(Token::BeginScope, *m_lexerState); return Status::Ok;}
yy31:
	++m_lexerState->current;
	{ setToken(Token::EndScope, *m_lexerState); return Status::Ok;}
yy33:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'd':	goto yy45;
	default:	goto yy16;
	}
yy34:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'l':	goto yy47;
	default:	goto yy16;
	}
yy35:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy36;
	}
yy36:
	{ setToken(Token::Function, *m_lexerState);return Status::Ok; }
yy37:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 't':	goto yy48;
	default:	goto yy16;
	}
yy38:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 't':	goto yy50;
	default:	goto yy16;
	}
yy39:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy40;
	}
yy40:
	{ setToken(Token::Or, *m_lexerState); return Status::Ok; }
yy41:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'i':	goto yy52;
	default:	goto yy16;
	}
yy42:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'u':	goto yy53;
	default:	goto yy16;
	}
yy43:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'p':	goto yy54;
	default:	goto yy16;
	}
yy44:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'r':	goto yy55;
	default:	goto yy16;
	}
yy45:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy46;
	}
yy46:
	{ setToken(Token::And, *m_lexerState); return Status::Ok; }
yy47:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 's':	goto yy57;
	default:	goto yy16;
	}
yy48:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy49;
	}
yy49:
	{ setToken(Token::Let, *m_lexerState);return Status::Ok; }
yy50:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy51;
	}
yy51:
	{ setToken(Token::Not, *m_lexerState); return Status::Ok; }
yy52:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 's':	goto yy58;
	default:	goto yy16;
	}
yy53:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy60;
	default:	goto yy16;
	}
yy54:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy62;
	default:	goto yy16;
	}
yy55:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy56;
	}
yy56:
	{ setToken(Token::Var, *m_lexerState); return Status::Ok; }
yy57:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy64;
	default:	goto yy16;
	}
yy58:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy59;
	}
yy59:
	{ setToken(Token::This, *m_lexerState);return Status::Ok; }
yy60:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy61;
	}
yy61:
	{ setToken(Token::True, *m_lexerState); return Status::Ok; }
yy62:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy63;
	}
yy63:
	{ setToken(Token::Type, *m_lexerState); return Status::Ok;}
yy64:
	yych = *++m_lexerState->current;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy15;
	default:	goto yy65;
	}
yy65:
	{ setToken(Token::False, *m_lexerState); return Status::Ok; }
}

        }

    }
}
