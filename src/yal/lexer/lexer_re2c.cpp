/* Generated by re2c 1.0.2 on Wed Sep 27 20:51:40 2017 */
#line 1 "lexer_re2c.in"
#include "yal/yal.h"
#include "yal/io/bytestream.h"
#include "yal/lexer/tokens.h"
#include "yal/lexer/lexer.h"
#include <iostream>
#define YYMAXFILL 5


namespace yal {

    enum {
        kMaxBufferSize = 4096
    };

    struct Lexer::LexerState {
        uint8_t buffer[kMaxBufferSize + YYMAXFILL];
        uint8_t* limit = nullptr;
        uint8_t* current = nullptr;
        uint8_t* marker = nullptr;
        uint8_t* token = nullptr;
        bool eof = false;
        size_t lineNum = 1;
        size_t streamReadOffset = std::numeric_limits<size_t>::max();
        size_t lineStartOffset = 0;
        size_t tokenLineStart =0;
        size_t tokenColumnStart = 0;


        bool fill(const size_t size,
                  ByteStream& stream) {

            if (eof) {
                return false;
            }
            const size_t free = token - buffer;
            if (free < size) {
                return false;
            }
            streamReadOffset = static_cast<uintptr_t>(limit - token) + stream.getPosition();
            ::memmove(buffer, token, limit - token);
            limit -= free;
            current -= free;
            marker -= free;
            token -= free;
            limit += stream.read(limit, free);
            if (limit < buffer + kMaxBufferSize) {
                eof = true;
                memset(limit, 0, YYMAXFILL);
                limit += YYMAXFILL;
            }
            return true;
        }


        size_t getColumnOffsetStart() const {

            if ( streamReadOffset== std::numeric_limits<size_t>::max()) {
                return 0;
            }

           return streamReadOffset +
                static_cast<size_t>(reinterpret_cast<uintptr_t>(token)
                                    - reinterpret_cast<uintptr_t>(buffer))
                            - lineStartOffset;
        }

        size_t getColumnOffsetEnd() const {
           return streamReadOffset +
                static_cast<size_t>(reinterpret_cast<uintptr_t>(current)
                                    - reinterpret_cast<uintptr_t>(buffer))
                            - lineStartOffset;
        }

        size_t getStreamOffset() const {
            return streamReadOffset +
                 static_cast<size_t>(reinterpret_cast<uintptr_t>(token)
                                     - reinterpret_cast<uintptr_t>(buffer));
        }

        void updateLineStartOffset() {
            lineNum++;
            lineStartOffset = streamReadOffset +
                    static_cast<size_t>(reinterpret_cast<uintptr_t>(current)
                                        - reinterpret_cast<uintptr_t>(buffer));
        }

    };

    Lexer::Lexer(ByteStream &stream):
        m_stream(stream),
        m_lexerState(createLexerState()),
        m_curToken()
    {
        m_lexerState->limit = m_lexerState->buffer + kMaxBufferSize;
        m_lexerState->current = m_lexerState->limit;
        m_lexerState->token =m_lexerState->limit;
        m_lexerState->marker = m_lexerState->limit;
        m_curToken.token = Token::TokenCount;
    }

    Lexer::~Lexer(){

    }

    void
    Lexer::setToken(const Token token,
                    const LexerState& state) {
        m_curToken.token = token;
        m_curToken.tokLen =
                static_cast<size_t>(reinterpret_cast<uintptr_t>(state.current)
                                    - reinterpret_cast<uintptr_t>(state.token));
        m_curToken.lineStart = state.tokenLineStart;
        m_curToken.lineEnd = state.lineNum;
        m_curToken.columnStart = state.tokenColumnStart;
        m_curToken.columnEnd =state.getColumnOffsetEnd();
        m_curToken.tokenOffsetInStream = state.getStreamOffset();
    }

    std::unique_ptr<Lexer::LexerState>
    Lexer::createLexerState(){
        return std::make_unique<Lexer::LexerState>();
    }

    Lexer::LexerStatus
    Lexer::re2cExecute() {
        for (;;) {
            m_lexerState->token = m_lexerState->current;
            m_lexerState->tokenLineStart = m_lexerState->lineNum;
            m_lexerState->tokenColumnStart = m_lexerState->getColumnOffsetStart();
            
#line 134 "lexer_re2c.cpp"
{
	unsigned char yych;
	if ((m_lexerState->limit - m_lexerState->current) < 5) if (!m_lexerState->fill(5, m_stream)) return LexerStatus::EOS;
	yych = *m_lexerState->current;
	switch (yych) {
	case 0x00:	goto yy2;
	case '\t':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case 'a':	goto yy10;
	case 'f':	goto yy11;
	case 'l':	goto yy12;
	case 'n':	goto yy13;
	case 'o':	goto yy14;
	case 't':	goto yy15;
	case 'v':	goto yy16;
	default:	goto yy4;
	}
yy2:
	++m_lexerState->current;
#line 139 "lexer_re2c.in"
	{ if (m_lexerState->limit - m_lexerState->token == YYMAXFILL) {return LexerStatus::EOS;} }
#line 157 "lexer_re2c.cpp"
yy4:
	++m_lexerState->current;
yy5:
#line 171 "lexer_re2c.in"
	{ setToken(Token::TokenCount, *m_lexerState); return LexerStatus::Error;}
#line 163 "lexer_re2c.cpp"
yy6:
	++m_lexerState->current;
#line 170 "lexer_re2c.in"
	{continue;}
#line 168 "lexer_re2c.cpp"
yy8:
	++m_lexerState->current;
#line 169 "lexer_re2c.in"
	{m_lexerState->updateLineStartOffset(); continue;}
#line 173 "lexer_re2c.cpp"
yy10:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'n':	goto yy17;
	default:	goto yy5;
	}
yy11:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'a':	goto yy19;
	default:	goto yy5;
	}
yy12:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'e':	goto yy20;
	default:	goto yy5;
	}
yy13:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'o':	goto yy21;
	default:	goto yy5;
	}
yy14:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'r':	goto yy22;
	default:	goto yy5;
	}
yy15:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'h':	goto yy24;
	case 'r':	goto yy25;
	default:	goto yy5;
	}
yy16:
	yych = *(m_lexerState->marker = ++m_lexerState->current);
	switch (yych) {
	case 'a':	goto yy26;
	default:	goto yy5;
	}
yy17:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'd':	goto yy27;
	default:	goto yy18;
	}
yy18:
	m_lexerState->current = m_lexerState->marker;
	goto yy5;
yy19:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'l':	goto yy29;
	default:	goto yy18;
	}
yy20:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 't':	goto yy30;
	default:	goto yy18;
	}
yy21:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 't':	goto yy32;
	default:	goto yy18;
	}
yy22:
	++m_lexerState->current;
#line 166 "lexer_re2c.in"
	{ setToken(Token::Or, *m_lexerState); return LexerStatus::Ok; }
#line 248 "lexer_re2c.cpp"
yy24:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'i':	goto yy34;
	default:	goto yy18;
	}
yy25:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'u':	goto yy35;
	default:	goto yy18;
	}
yy26:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'r':	goto yy36;
	default:	goto yy18;
	}
yy27:
	++m_lexerState->current;
#line 165 "lexer_re2c.in"
	{ setToken(Token::And, *m_lexerState); return LexerStatus::Ok; }
#line 271 "lexer_re2c.cpp"
yy29:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 's':	goto yy38;
	default:	goto yy18;
	}
yy30:
	++m_lexerState->current;
#line 162 "lexer_re2c.in"
	{ setToken(Token::Let, *m_lexerState);return LexerStatus::Ok; }
#line 282 "lexer_re2c.cpp"
yy32:
	++m_lexerState->current;
#line 167 "lexer_re2c.in"
	{ setToken(Token::Not, *m_lexerState); return LexerStatus::Ok; }
#line 287 "lexer_re2c.cpp"
yy34:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 's':	goto yy39;
	default:	goto yy18;
	}
yy35:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy41;
	default:	goto yy18;
	}
yy36:
	++m_lexerState->current;
#line 161 "lexer_re2c.in"
	{ setToken(Token::Var, *m_lexerState); return LexerStatus::Ok; }
#line 304 "lexer_re2c.cpp"
yy38:
	yych = *++m_lexerState->current;
	switch (yych) {
	case 'e':	goto yy43;
	default:	goto yy18;
	}
yy39:
	++m_lexerState->current;
#line 168 "lexer_re2c.in"
	{ setToken(Token::This, *m_lexerState);return LexerStatus::Ok; }
#line 315 "lexer_re2c.cpp"
yy41:
	++m_lexerState->current;
#line 163 "lexer_re2c.in"
	{ setToken(Token::True, *m_lexerState); return LexerStatus::Ok; }
#line 320 "lexer_re2c.cpp"
yy43:
	++m_lexerState->current;
#line 164 "lexer_re2c.in"
	{ setToken(Token::False, *m_lexerState); return LexerStatus::Ok; }
#line 325 "lexer_re2c.cpp"
}
#line 172 "lexer_re2c.in"

        }

    }
}
