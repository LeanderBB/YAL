%name YALParser

%token_prefix YAL_TOKEN_

%include {
#include "yal/parser/parserincludes.h"
#include <cassert>
#include <iostream>
}


//%extra_argument { YALParserState_t *pParseState }

%syntax_error {
    std::cerr << "syntax error - ";
    int n = sizeof(yyTokenName) / sizeof(yyTokenName[0]);
    for (int i = 0; i < n; ++i) {
        int a = yy_find_shift_action(yypParser, (YYCODETYPE)i);
        if (a < YYNSTATE + YYNRULE) {
            std::cout << "expected " << yyTokenName[i] << std::endl;
        }
    }
}


%right ASSIGN.
%left OR.
%left AND.
%left BIT_OR.
%left BIT_XOR.
%left BIT_AND.
%nonassoc EQ NE GT LT GE LE.
%left PLUS MINUS.
%left MULT DIV MOD.
%right NEG.
%right NOT.
%right DOT.


yalprog ::= program END.

program ::= program type_decl.
program ::= .



type_decl ::= NAME COLON TYPE SCOPE_BEGIN type_var_decls SCOPE_END.

type_var_decls ::= type_var_decls type_var_decl.
type_var_decls ::= type_var_decl.

type_var_decl ::= NAME COLON TYPE SEMI_COLON.
